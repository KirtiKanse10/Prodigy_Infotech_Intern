<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>Tic-Tac-Toe</title>
  <style>
    body {
      font-family: 'Segoe UI', sans-serif;
      background: linear-gradient(to right, #1f1c2c, #928dab);
      display: flex;
      flex-direction: column;
      align-items: center;
      justify-content: center;
      height: 100vh;
      margin: 0;
      color: #fff;
    }

    h1 {
      margin-bottom: 20px;
      font-size: 2.5rem;
    }

    .board {
      display: grid;
      grid-template-columns: repeat(3, 100px);
      gap: 10px;
    }

    .cell {
      width: 100px;
      height: 100px;
      background: rgba(255, 255, 255, 0.1);
      border: 2px solid #fff;
      font-size: 2rem;
      color: #fff;
      display: flex;
      align-items: center;
      justify-content: center;
      cursor: pointer;
      transition: 0.3s ease;
    }

    .cell:hover {
      background: rgba(255, 255, 255, 0.2);
    }

    .status {
      margin-top: 20px;
      font-size: 1.2rem;
    }

    button {
      margin-top: 20px;
      padding: 10px 20px;
      background: #fff;
      color: #333;
      border: none;
      border-radius: 6px;
      cursor: pointer;
      font-weight: 600;
      transition: 0.3s ease;
    }

    button:hover {
      background: #eee;
    }
  </style>
</head>
<body>

  <h1>🎮 Tic-Tac-Toe</h1>
  <div class="board" id="board"></div>
  <div class="status" id="status">Player X's turn</div>
  <button onclick="resetBoard()">Reset</button>

  <script>
    const board = document.getElementById('board');
    const statusText = document.getElementById('status');
    let currentPlayer = 'X';
    let gameState = ["", "", "", "", "", "", "", "", ""];
    let gameActive = true;

    const winningCombos = [
      [0,1,2],[3,4,5],[6,7,8],
      [0,3,6],[1,4,7],[2,5,8],
      [0,4,8],[2,4,6]
    ];

    function handleClick(index) {
      if (!gameActive || gameState[index]) return;

      gameState[index] = currentPlayer;
      renderBoard();

      if (checkWinner()) {
        statusText.innerText = `🎉 Player ${currentPlayer} Wins!`;
        gameActive = false;
        return;
      }

      if (!gameState.includes("")) {
        statusText.innerText = "It's a Draw! 🤝";
        gameActive = false;
        return;
      }

      currentPlayer = currentPlayer === 'X' ? 'O' : 'X';
      statusText.innerText = `Player ${currentPlayer}'s turn`;
    }

    function checkWinner() {
      return winningCombos.some(combo => {
        const [a, b, c] = combo;
        return (
          gameState[a] &&
          gameState[a] === gameState[b] &&
          gameState[a] === gameState[c]
        );
      });
    }

    function renderBoard() {
      board.innerHTML = "";
      gameState.forEach((cell, index) => {
        const cellDiv = document.createElement('div');
        cellDiv.classList.add('cell');
        cellDiv.innerText = cell;
        cellDiv.addEventListener('click', () => handleClick(index));
        board.appendChild(cellDiv);
      });
    }

    function resetBoard() {
      gameState = ["", "", "", "", "", "", "", "", ""];
      gameActive = true;
      currentPlayer = 'X';
      statusText.innerText = "Player X's turn";
      renderBoard();
    }

    renderBoard();
  </script>

</body>
</html>
